# functions to simplify the execution of OpenFOAM utilities and solvers with Singularity
# most functions are copied from $WM_PROJECT_DIR/bin/tools/RunFunctions of OpenFOAM-v2012
# with small modifications to run with Singularity

image="../../of2106.sif"
bashrc="/usr/lib/openfoam/openfoam2106/etc/bashrc"

imageFound()
{
    if [ -f "$image" ]; then
        return 0
    fi
    return 1
}

setImage()
{
    if [ -f "$1" ]; then
        image=$1
    else
        echo "Image $1 not found"
    fi
}

isParallel()
{
    for i; do [ "$i" = "-parallel" ] && return 0; done
    return 1
}

getNumberOfProcessors()
{
    local dict="${1:-system/decomposeParDict}"

    # Re-use positional parameters for automatic whitespace elimination
    set -- $(foamDictionary -entry numberOfSubdomains -value "$dict" 2>/dev/null)

    if [ "$#" -eq 1 ]
    then
        echo "$1"
    else
        echo "Error getting 'numberOfSubdomains' from '$dict'" 1>&2
        echo 1      # Fallback is 1 proc (serial)
        return 1
    fi
}

restore0Dir()
{
    case "$1" in
    -processor | -processors)
        echo "Restore 0/ from 0.orig/ for processor directories"
        [ -d 0.orig ] || echo "    Warning: no 0.orig/ found"

        # do nonetheless
        \ls -d processor* | xargs -I {} \rm -rf ./{}/0
        \ls -d processor* | xargs -I {} \cp -r 0.orig ./{}/0 > /dev/null 2>&1

        # Remove '#include' directives from field dictionaries
        # for collated format
        if [ "$1" = "-processors" ]
        then
        (
            echo "Filter #include directives in processors/0:"
            \cd processors/0 2>/dev/null || exit 0
            for file in $(grep -l "#include" * 2>/dev/null)
            do
                foamDictionary "$file" > "$file.$$." && mv "$file.$$." "$file"
                echo "    $file"
            done | tr -d '\n'
            echo
        )
        fi
        ;;

    *)
        echo "Restore 0/ from 0.orig/"
        if [ -d 0.orig ]
        then
            \rm -rf 0
            \cp -r 0.orig 0 2>/dev/null
        else
            echo "    Warning: no 0.orig/ found"
        fi
        ;;
    esac
}

singularityRun()
{
    local appName appRun logFile

    # Any additional parsed arguments (eg, decomposeParDict)
    local appArgs

    # Parse options until executable is encountered
    while [ "$#" -gt 0 ] && [ -z "$appRun" ]
    do
        case "$1" in
            -s | -suffix)
                logFile=".$2"
                shift
                ;;
            -decomposeParDict)
                appArgs="$appArgs $1 $2"
                shift
                ;;
            '')
                ;;
            *)
                appRun="$1"
                ;;
        esac
        shift
    done

    appName="${appRun##*/}"
    logFile="log.$appName$logFile"

    if [ -f "$logFile" ]; then
        echo "$appName already run on $PWD:" \
             "remove log file '$logFile' to re-run"
    else
        if imageFound; then
            echo "Running $appRun on $PWD with image $image"
            singularity exec $image bash -c "source $bashrc && $appRun $appArgs $@" > $logFile 2>&1
        else
            echo "Could not find Singularity image $image"
        fi
    fi
}

singularityRunParallel()
{
    local appName appRun logFile nProcs

    # Any additional parsed arguments (eg, decomposeParDict)
    local appArgs="-parallel"

    # Parse options until executable is encountered
    while [ "$#" -gt 0 ] && [ -z "$appRun" ]
    do
        case "$1" in
            -s | -suffix)
                logFile=".$2"
                shift
                ;;
            -n | -np)
                nProcs="$2"
                shift
                ;;
            -decomposeParDict)
                appArgs="$appArgs $1 $2"
                nProcs=$(getNumberOfProcessors "$2")
                shift
                ;;
            '')
                ;;
            *)
                appRun="$1"
                ;;
        esac
        shift
    done

    [ -n "$nProcs" ] || nProcs=$(getNumberOfProcessors system/decomposeParDict)

    appName="${appRun##*/}"
    logFile="log.$appName$logFile"

    if [ -f "$logFile" ]; then
        echo "$appName already run on $PWD:" \
             "remove log file '$logFile' to re-run"
    else
        if imageFound; then
            echo "Running $appRun ($nProcs processes) on $PWD with image $image"
            mpirun -np $nProcs singularity exec $image bash -c "source $bashrc && $appRun $appArgs $@" </dev/null > $logFile 2>&1
        else
                echo "Could not find Singularity image $image"
        fi
    fi
}

cleanTimeDirectories()
{
    echo "Cleaning case $PWD"
    zeros=""
    while [ ${#zeros} -lt 8 ]
    do
        timeDir="0.${zeros}[1-9]*"
        rm -rf ./${timeDir} ./-${timeDir}
        zeros="0$zeros"
    done
    rm -rf \
        ./[1-9]* ./-[1-9]* ./log ./log.* ./log-* ./logSummary.* \
        ./.fxLock ./*.xml ./ParaView* ./paraFoam* \
        ./*.blockMesh ./*.foam ./*.OpenFOAM \
        ./.setSet
}

cleanDynamicCode()
{
    if [ -d dynamicCode ] && [ -d system ]
    then
        rm -rf dynamicCode
    fi
}

cleanSnappyFiles()
{
    rm -f \
        constant/polyMesh/cellLevel \
        constant/polyMesh/pointLevel \
        constant/polyMesh/refinementHistory \
        constant/polyMesh/level0Edge \
        constant/polyMesh/surfaceIndex
    rm -f \
        processor*/constant/polyMesh/cellLevel \
        processor*/constant/polyMesh/pointLevel \
        processor*/constant/polyMesh/refinementHistory \
        processor*/constant/polyMesh/level0Edge \
        processor*/constant/polyMesh/surfaceIndex
    rm -f \
        constant/cellLevel \
        constant/pointLevel \
        0/cellLevel \
        0/pointLevel
    rm -f \
        processor*/constant/cellLevel \
        processor*/constant/pointLevel \
        processor*/0/cellLevel \
        processor*/0/pointLevel
}

cleanPostProcessing()
{
    rm -rf Ensight EnSight ensightWrite insitu VTK
    rm -rf postProcessing
    rm -rf postProcessing-*
    rm -rf cuttingPlane
    rm -rf surfaceSampling
}

cleanCase()
{
    cleanTimeDirectories
    cleanPostProcessing
    cleanDynamicCode

    rm -rf processor*
    rm -rf TDAC
    rm -rf probes*
    rm -rf forces*
    rm -rf graphs*
    rm -rf sets
    rm -rf system/machines

    # Possible blockMesh output
    rm -f blockTopology.vtu blockTopology.obj blockCentres.obj

    # From mpirunDebug
    rm -f gdbCommands  mpirun.schema

    cleanSnappyFiles
    rm -f 0/cellDist

    (
        cd constant 2>/dev/null || exit 0

        rm -rf \
          cellDecomposition cellToRegion cellLevel* pointLevel* \
          tetDualMesh \
          ;

        # Old constant/polyMesh location for blockMeshDict still in use?
        # - emit a gentle warning
        if [ -e polyMesh/blockMeshDict.m4 ]
        then
            rm -f polyMesh/blockMeshDict
            echo
            echo "Warning: not removing constant/polyMesh/ "
            echo "   it contains a blockMeshDict, which should normally be under system/ instead"
            echo
        elif [ -e polyMesh/blockMeshDict ]
        then
            echo
            echo "Warning: not removing constant/polyMesh/ "
            echo "   it contains a blockMeshDict, which should normally be under system/ instead"
            echo
        else
            # Remove polyMesh entirely if there is no blockMeshDict
            rm -rf polyMesh
        fi
    )

    if [ -e system/blockMeshDict.m4 ]
    then
        rm -f system/blockMeshDict
    fi
}
